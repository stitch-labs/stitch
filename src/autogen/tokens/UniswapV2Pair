[1] → pragma solidity =0.5.16;
   |-[0] ← pragma::pragma
   |-[1] ← solidity::solidity
   |-[2] ← =::=
   |-[3] ← uint::0
   |-[4] ← .::.
   |-[5] ← uint::5
   |-[6] ← .::.
   |-[7] ← uint::16
   |-[8] ← ;::;
[3] → import './interfaces/IUniswapV2Pair.sol';
   |-[0] ← import::import
[4] → import './UniswapV2ERC20.sol';
   |-[0] ← import::import
[5] → import './libraries/Math.sol';
   |-[0] ← import::import
[6] → import './libraries/UQ112x112.sol';
   |-[0] ← import::import
[7] → import './interfaces/IERC20.sol';
   |-[0] ← import::import
[8] → import './interfaces/IUniswapV2Factory.sol';
   |-[0] ← import::import
[9] → import './interfaces/IUniswapV2Callee.sol';
   |-[0] ← import::import
[11] → contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {
   |-[0] ← contract::contract
   |-[1] ← identifier::UniswapV2Pair
   |-[2] ← is::is
   |-[3] ← identifier::IUniswapV2Pair
   |-[4] ← ,::,
   |-[5] ← identifier::UniswapV2ERC20
   |-[6] ← {::{
[12] →     using SafeMath  for uint;
   |-[0] ← using::using
   |-[1] ← identifier::SafeMath
   |-[2] ← for::for
   |-[3] ← uint::uint
   |-[4] ← ;::;
[13] →     using UQ112x112 for uint224;
   |-[0] ← using::using
   |-[1] ← identifier::UQ112x112
   |-[2] ← for::for
   |-[3] ← identifier::uint224
   |-[4] ← ;::;
[15] →     uint public constant MINIMUM_LIQUIDITY = 10**3;
   |-[0] ← uint::uint
   |-[1] ← public::public
   |-[2] ← constant::constant
   |-[3] ← identifier::MINIMUM
[16] →     bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));
   |-[0] ← identifier::bytes4
   |-[1] ← private::private
   |-[2] ← constant::constant
   |-[3] ← identifier::SELECTOR
   |-[4] ← =::=
   |-[5] ← identifier::bytes4
   |-[6] ← (::(
   |-[7] ← identifier::keccak256
   |-[8] ← (::(
   |-[9] ← bytes::bytes
   |-[10] ← (::(
[18] →     address public factory;
   |-[0] ← address::address
   |-[1] ← public::public
   |-[2] ← identifier::factory
   |-[3] ← ;::;
[19] →     address public token0;
   |-[0] ← address::address
   |-[1] ← public::public
   |-[2] ← identifier::token0
   |-[3] ← ;::;
[20] →     address public token1;
   |-[0] ← address::address
   |-[1] ← public::public
   |-[2] ← identifier::token1
   |-[3] ← ;::;
[22] →     uint112 private reserve0;           // uses single storage slot, accessible via getReserves
   |-[0] ← identifier::uint112
   |-[1] ← private::private
   |-[2] ← identifier::reserve0
   |-[3] ← ;::;
   |-[4] ← comment:: uses single storage slot, accessible via getReserves
[23] →     uint112 private reserve1;           // uses single storage slot, accessible via getReserves
   |-[0] ← identifier::uint112
   |-[1] ← private::private
   |-[2] ← identifier::reserve1
   |-[3] ← ;::;
   |-[4] ← comment:: uses single storage slot, accessible via getReserves
[24] →     uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves
   |-[0] ← identifier::uint32
   |-[1] ← private::private
   |-[2] ← identifier::blockTimestampLast
   |-[3] ← ;::;
   |-[4] ← comment:: uses single storage slot, accessible via getReserves
[26] →     uint public price0CumulativeLast;
   |-[0] ← uint::uint
   |-[1] ← public::public
   |-[2] ← identifier::price0CumulativeLast
   |-[3] ← ;::;
[27] →     uint public price1CumulativeLast;
   |-[0] ← uint::uint
   |-[1] ← public::public
   |-[2] ← identifier::price1CumulativeLast
   |-[3] ← ;::;
[28] →     uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event
   |-[0] ← uint::uint
   |-[1] ← public::public
   |-[2] ← identifier::kLast
   |-[3] ← ;::;
   |-[4] ← comment:: reserve0 * reserve1, as of immediately after the most recent liquidity event
[30] →     uint private unlocked = 1;
   |-[0] ← uint::uint
   |-[1] ← private::private
   |-[2] ← identifier::unlocked
   |-[3] ← =::=
   |-[4] ← uint::1
   |-[5] ← ;::;
[31] →     modifier lock() {
   |-[0] ← modifier::modifier
   |-[1] ← identifier::lock
   |-[2] ← (::(
   |-[3] ← )::)
   |-[4] ← {::{
[32] →         require(unlocked == 1, 'UniswapV2: LOCKED');
   |-[0] ← identifier::require
   |-[1] ← (::(
   |-[2] ← identifier::unlocked
   |-[3] ← ==::==
   |-[4] ← uint::1
   |-[5] ← ,::,
[33] →         unlocked = 0;
   |-[0] ← identifier::unlocked
   |-[1] ← =::=
   |-[2] ← uint::0
   |-[3] ← ;::;
[34] →         _;
[35] →         unlocked = 1;
   |-[0] ← identifier::unlocked
   |-[1] ← =::=
   |-[2] ← uint::1
   |-[3] ← ;::;
[36] →     }
   |-[0] ← }::}
[38] →     function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {
   |-[0] ← function::function
   |-[1] ← identifier::getReserves
   |-[2] ← (::(
   |-[3] ← )::)
   |-[4] ← public::public
   |-[5] ← view::view
   |-[6] ← returns::returns
   |-[7] ← (::(
   |-[8] ← identifier::uint112
[39] →         _reserve0 = reserve0;
[40] →         _reserve1 = reserve1;
[41] →         _blockTimestampLast = blockTimestampLast;
[42] →     }
   |-[0] ← }::}
[44] →     function _safeTransfer(address token, address to, uint value) private {
   |-[0] ← function::function
[45] →         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));
   |-[0] ← (::(
   |-[1] ← bool::bool
   |-[2] ← identifier::success
   |-[3] ← ,::,
   |-[4] ← bytes::bytes
   |-[5] ← memory::memory
   |-[6] ← identifier::data
   |-[7] ← )::)
   |-[8] ← =::=
   |-[9] ← identifier::token
   |-[10] ← .::.
   |-[11] ← identifier::call
   |-[12] ← (::(
   |-[13] ← identifier::abi
   |-[14] ← .::.
   |-[15] ← identifier::encodeWithSelector
   |-[16] ← (::(
   |-[17] ← identifier::SELECTOR
   |-[18] ← ,::,
   |-[19] ← identifier::to
   |-[20] ← ,::,
   |-[21] ← identifier::value
   |-[22] ← )::)
   |-[23] ← )::)
   |-[24] ← ;::;
[46] →         require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');
   |-[0] ← identifier::require
   |-[1] ← (::(
   |-[2] ← identifier::success
   |-[3] ← &::&
   |-[4] ← &::&
   |-[5] ← (::(
   |-[6] ← identifier::data
   |-[7] ← .::.
   |-[8] ← identifier::length
   |-[9] ← ==::==
   |-[10] ← uint::0
   |-[11] ← |::|
   |-[12] ← |::|
   |-[13] ← identifier::abi
   |-[14] ← .::.
   |-[15] ← identifier::decode
   |-[16] ← (::(
   |-[17] ← identifier::data
   |-[18] ← ,::,
   |-[19] ← (::(
   |-[20] ← bool::bool
   |-[21] ← )::)
   |-[22] ← )::)
   |-[23] ← )::)
   |-[24] ← ,::,
[47] →     }
   |-[0] ← }::}
[49] →     event Mint(address indexed sender, uint amount0, uint amount1);
   |-[0] ← event::event
   |-[1] ← identifier::Mint
   |-[2] ← (::(
   |-[3] ← address::address
   |-[4] ← indexed::indexed
   |-[5] ← identifier::sender
   |-[6] ← ,::,
   |-[7] ← uint::uint
   |-[8] ← identifier::amount0
   |-[9] ← ,::,
   |-[10] ← uint::uint
   |-[11] ← identifier::amount1
   |-[12] ← )::)
   |-[13] ← ;::;
[50] →     event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
   |-[0] ← event::event
   |-[1] ← identifier::Burn
   |-[2] ← (::(
   |-[3] ← address::address
   |-[4] ← indexed::indexed
   |-[5] ← identifier::sender
   |-[6] ← ,::,
   |-[7] ← uint::uint
   |-[8] ← identifier::amount0
   |-[9] ← ,::,
   |-[10] ← uint::uint
   |-[11] ← identifier::amount1
   |-[12] ← ,::,
   |-[13] ← address::address
   |-[14] ← indexed::indexed
   |-[15] ← identifier::to
   |-[16] ← )::)
   |-[17] ← ;::;
[51] →     event Swap(
   |-[0] ← event::event
   |-[1] ← identifier::Swap
   |-[2] ← (::(
[52] →         address indexed s
   |-[0] ← address::address
   |-[1] ← indexed::indexed
   |-[2] ← identifier::s
[53] → ender,
   |-[0] ← identifier::ender
   |-[1] ← ,::,
[54] →         uint amount0In,
   |-[0] ← uint::uint
   |-[1] ← identifier::amount0In
   |-[2] ← ,::,
[55] →         uint amount1In,
   |-[0] ← uint::uint
   |-[1] ← identifier::amount1In
   |-[2] ← ,::,
[56] →         uint amount0Out,
   |-[0] ← uint::uint
   |-[1] ← identifier::amount0Out
   |-[2] ← ,::,
[57] →         uint amount1Out,
   |-[0] ← uint::uint
   |-[1] ← identifier::amount1Out
   |-[2] ← ,::,
[58] →         address indexed to
   |-[0] ← address::address
   |-[1] ← indexed::indexed
   |-[2] ← identifier::to
[59] →     );
   |-[0] ← )::)
   |-[1] ← ;::;
[60] →     event Sync(uint112 reserve0, uint112 reserve1);
   |-[0] ← event::event
   |-[1] ← identifier::Sync
   |-[2] ← (::(
   |-[3] ← identifier::uint112
   |-[4] ← identifier::reserve0
   |-[5] ← ,::,
   |-[6] ← identifier::uint112
   |-[7] ← identifier::reserve1
   |-[8] ← )::)
   |-[9] ← ;::;
[62] →     constructor() public {
   |-[0] ← constructor::constructor
   |-[1] ← (::(
   |-[2] ← )::)
   |-[3] ← public::public
   |-[4] ← {::{
[63] →         factory = msg.sender;
   |-[0] ← identifier::factory
   |-[1] ← =::=
   |-[2] ← identifier::msg
   |-[3] ← .::.
   |-[4] ← identifier::sender
   |-[5] ← ;::;
[64] →     }
   |-[0] ← }::}
[66] →     // called once by the factory at time of deployment
   |-[0] ← comment:: called once by the factory at time of deployment
[67] →     function initialize(address _token0, address _token1) external {
   |-[0] ← function::function
   |-[1] ← identifier::initialize
   |-[2] ← (::(
   |-[3] ← address::address
[68] →         require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check
   |-[0] ← identifier::require
   |-[1] ← (::(
   |-[2] ← identifier::msg
   |-[3] ← .::.
   |-[4] ← identifier::sender
   |-[5] ← ==::==
   |-[6] ← identifier::factory
   |-[7] ← ,::,
[69] →         token0 = _token0;
   |-[0] ← identifier::token0
   |-[1] ← =::=
[70] →         token1 = _token1;
   |-[0] ← identifier::token1
   |-[1] ← =::=
[71] →     }
   |-[0] ← }::}
[73] →     // update reserves and, on the first call per block, price accumulators
   |-[0] ← comment:: update reserves and, on the first call per block, price accumulators
[74] →     function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {
   |-[0] ← function::function
[75] →         require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');
   |-[0] ← identifier::require
   |-[1] ← (::(
   |-[2] ← identifier::balance0
   |-[3] ← <=::<=
   |-[4] ← identifier::uint112
   |-[5] ← (::(
   |-[6] ← -::-
   |-[7] ← uint::1
   |-[8] ← )::)
   |-[9] ← &::&
   |-[10] ← &::&
   |-[11] ← identifier::balance1
   |-[12] ← <=::<=
   |-[13] ← identifier::uint112
   |-[14] ← (::(
   |-[15] ← -::-
   |-[16] ← uint::1
   |-[17] ← )::)
   |-[18] ← ,::,
[76] →         uint32 blockTimestamp = uint32(block.timestamp % 2**32);
   |-[0] ← identifier::uint32
   |-[1] ← identifier::blockTimestamp
   |-[2] ← =::=
   |-[3] ← identifier::uint32
   |-[4] ← (::(
   |-[5] ← identifier::block
   |-[6] ← .::.
   |-[7] ← identifier::timestamp
   |-[8] ← %::%
   |-[9] ← uint::2
   |-[10] ← *::*
   |-[11] ← *::*
   |-[12] ← uint::32
   |-[13] ← )::)
   |-[14] ← ;::;
[77] →         uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired
   |-[0] ← identifier::uint32
   |-[1] ← identifier::timeElapsed
   |-[2] ← =::=
   |-[3] ← identifier::blockTimestamp
   |-[4] ← -::-
   |-[5] ← identifier::blockTimestampLast
   |-[6] ← ;::;
   |-[7] ← comment:: overflow is desired
[78] →         if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {
   |-[0] ← if::if
   |-[1] ← (::(
   |-[2] ← identifier::timeElapsed
   |-[3] ← >::>
   |-[4] ← uint::0
   |-[5] ← &::&
   |-[6] ← &::&
[79] →             // * never overflows, and + overflow is desired
   |-[0] ← comment:: * never overflows, and + overflow is desired
[80] →             price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;
   |-[0] ← identifier::price0CumulativeLast
   |-[1] ← +=::+=
   |-[2] ← uint::uint
   |-[3] ← (::(
   |-[4] ← identifier::UQ112x112
   |-[5] ← .::.
   |-[6] ← identifier::encode
   |-[7] ← (::(
[81] →             price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;
   |-[0] ← identifier::price1CumulativeLast
   |-[1] ← +=::+=
   |-[2] ← uint::uint
   |-[3] ← (::(
   |-[4] ← identifier::UQ112x112
   |-[5] ← .::.
   |-[6] ← identifier::encode
   |-[7] ← (::(
[82] →         }
   |-[0] ← }::}
[83] →         reserve0 = uint112(balance0);
   |-[0] ← identifier::reserve0
   |-[1] ← =::=
   |-[2] ← identifier::uint112
   |-[3] ← (::(
   |-[4] ← identifier::balance0
   |-[5] ← )::)
   |-[6] ← ;::;
[84] →         reserve1 = uint112(balance1);
   |-[0] ← identifier::reserve1
   |-[1] ← =::=
   |-[2] ← identifier::uint112
   |-[3] ← (::(
   |-[4] ← identifier::balance1
   |-[5] ← )::)
   |-[6] ← ;::;
[85] →         blockTimestampLast = blockTimestamp;
   |-[0] ← identifier::blockTimestampLast
   |-[1] ← =::=
   |-[2] ← identifier::blockTimestamp
   |-[3] ← ;::;
[86] →         emit Sync(reserve0, reserve1);
   |-[0] ← emit::emit
   |-[1] ← identifier::Sync
   |-[2] ← (::(
   |-[3] ← identifier::reserve0
   |-[4] ← ,::,
   |-[5] ← identifier::reserve1
   |-[6] ← )::)
   |-[7] ← ;::;
[87] →     }
   |-[0] ← }::}
[89] →     // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)
   |-[0] ← comment:: if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)
[90] →     function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {
   |-[0] ← function::function
[91] →         address feeTo = IUniswapV2Factory(factory).feeTo();
   |-[0] ← address::address
   |-[1] ← identifier::feeTo
   |-[2] ← =::=
   |-[3] ← identifier::IUniswapV2Factory
   |-[4] ← (::(
   |-[5] ← identifier::factory
   |-[6] ← )::)
   |-[7] ← .::.
   |-[8] ← identifier::feeTo
   |-[9] ← (::(
   |-[10] ← )::)
   |-[11] ← ;::;
[92] →         feeOn = feeTo != address(0);
   |-[0] ← identifier::feeOn
   |-[1] ← =::=
   |-[2] ← identifier::feeTo
   |-[3] ← !=::!=
   |-[4] ← address::address
   |-[5] ← (::(
   |-[6] ← uint::0
   |-[7] ← )::)
   |-[8] ← ;::;
[93] →         uint _kLast = kLast; // gas savings
   |-[0] ← uint::uint
[94] →         if (feeOn) {
   |-[0] ← if::if
   |-[1] ← (::(
   |-[2] ← identifier::feeOn
   |-[3] ← )::)
   |-[4] ← {::{
[95] →             if (_kLast != 0) {
   |-[0] ← if::if
   |-[1] ← (::(
[96] →                 uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));
   |-[0] ← uint::uint
   |-[1] ← identifier::rootK
   |-[2] ← =::=
   |-[3] ← identifier::Math
   |-[4] ← .::.
   |-[5] ← identifier::sqrt
   |-[6] ← (::(
   |-[7] ← uint::uint
   |-[8] ← (::(
[97] →                 uint rootKLast = Math.sqrt(_kLast);
   |-[0] ← uint::uint
   |-[1] ← identifier::rootKLast
   |-[2] ← =::=
   |-[3] ← identifier::Math
   |-[4] ← .::.
   |-[5] ← identifier::sqrt
   |-[6] ← (::(
[98] →                 if (rootK > rootKLast) {
   |-[0] ← if::if
   |-[1] ← (::(
   |-[2] ← identifier::rootK
   |-[3] ← >::>
   |-[4] ← identifier::rootKLast
   |-[5] ← )::)
   |-[6] ← {::{
[99] →                  
[100] →    uint numerator = totalSupply.mul(rootK.sub(rootKLast));
   |-[0] ← uint::uint
   |-[1] ← identifier::numerator
   |-[2] ← =::=
   |-[3] ← identifier::totalSupply
   |-[4] ← .::.
   |-[5] ← identifier::mul
   |-[6] ← (::(
   |-[7] ← identifier::rootK
   |-[8] ← .::.
   |-[9] ← identifier::sub
   |-[10] ← (::(
   |-[11] ← identifier::rootKLast
   |-[12] ← )::)
   |-[13] ← )::)
   |-[14] ← ;::;
[101] →                     uint denominator = rootK.mul(5).add(rootKLast);
   |-[0] ← uint::uint
   |-[1] ← identifier::denominator
   |-[2] ← =::=
   |-[3] ← identifier::rootK
   |-[4] ← .::.
   |-[5] ← identifier::mul
   |-[6] ← (::(
   |-[7] ← uint::5
   |-[8] ← )::)
   |-[9] ← .::.
   |-[10] ← identifier::add
   |-[11] ← (::(
   |-[12] ← identifier::rootKLast
   |-[13] ← )::)
   |-[14] ← ;::;
[102] →                     uint liquidity = numerator / denominator;
   |-[0] ← uint::uint
   |-[1] ← identifier::liquidity
   |-[2] ← =::=
   |-[3] ← identifier::numerator
   |-[4] ← /::/
   |-[5] ← identifier::denominator
   |-[6] ← ;::;
[103] →                     if (liquidity > 0) _mint(feeTo, liquidity);
   |-[0] ← if::if
   |-[1] ← (::(
   |-[2] ← identifier::liquidity
   |-[3] ← >::>
   |-[4] ← uint::0
   |-[5] ← )::)
[104] →                 }
   |-[0] ← }::}
[105] →             }
   |-[0] ← }::}
[106] →         } else if (_kLast != 0) {
   |-[0] ← }::}
   |-[1] ← else::else
   |-[2] ← if::if
   |-[3] ← (::(
[107] →             kLast = 0;
   |-[0] ← identifier::kLast
   |-[1] ← =::=
   |-[2] ← uint::0
   |-[3] ← ;::;
[108] →         }
   |-[0] ← }::}
[109] →     }
   |-[0] ← }::}
[111] →     // this low-level function should be called from a contract which performs important safety checks
   |-[0] ← comment:: this low-level function should be called from a contract which performs important safety checks
[112] →     function mint(address to) external lock returns (uint liquidity) {
   |-[0] ← function::function
   |-[1] ← identifier::mint
   |-[2] ← (::(
   |-[3] ← address::address
   |-[4] ← identifier::to
   |-[5] ← )::)
   |-[6] ← external::external
   |-[7] ← identifier::lock
   |-[8] ← returns::returns
   |-[9] ← (::(
   |-[10] ← uint::uint
   |-[11] ← identifier::liquidity
   |-[12] ← )::)
   |-[13] ← {::{
[113] →         (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
   |-[0] ← (::(
   |-[1] ← identifier::uint112
[114] →         uint balance0 = IERC20(token0).balanceOf(address(this));
   |-[0] ← uint::uint
   |-[1] ← identifier::balance0
   |-[2] ← =::=
   |-[3] ← identifier::IERC20
   |-[4] ← (::(
   |-[5] ← identifier::token0
   |-[6] ← )::)
   |-[7] ← .::.
   |-[8] ← identifier::balanceOf
   |-[9] ← (::(
   |-[10] ← address::address
   |-[11] ← (::(
   |-[12] ← this::this
   |-[13] ← )::)
   |-[14] ← )::)
   |-[15] ← ;::;
[115] →         uint balance1 = IERC20(token1).balanceOf(address(this));
   |-[0] ← uint::uint
   |-[1] ← identifier::balance1
   |-[2] ← =::=
   |-[3] ← identifier::IERC20
   |-[4] ← (::(
   |-[5] ← identifier::token1
   |-[6] ← )::)
   |-[7] ← .::.
   |-[8] ← identifier::balanceOf
   |-[9] ← (::(
   |-[10] ← address::address
   |-[11] ← (::(
   |-[12] ← this::this
   |-[13] ← )::)
   |-[14] ← )::)
   |-[15] ← ;::;
[116] →         uint amount0 = balance0.sub(_reserve0);
   |-[0] ← uint::uint
   |-[1] ← identifier::amount0
   |-[2] ← =::=
   |-[3] ← identifier::balance0
   |-[4] ← .::.
   |-[5] ← identifier::sub
   |-[6] ← (::(
[117] →         uint amount1 = balance1.sub(_reserve1);
   |-[0] ← uint::uint
   |-[1] ← identifier::amount1
   |-[2] ← =::=
   |-[3] ← identifier::balance1
   |-[4] ← .::.
   |-[5] ← identifier::sub
   |-[6] ← (::(
[119] →         bool feeOn = _mintFee(_reserve0, _reserve1);
   |-[0] ← bool::bool
   |-[1] ← identifier::feeOn
   |-[2] ← =::=
[120] →         uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee
   |-[0] ← uint::uint
[121] →         if (_totalSupply == 0) {
   |-[0] ← if::if
   |-[1] ← (::(
[122] →             liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);
   |-[0] ← identifier::liquidity
   |-[1] ← =::=
   |-[2] ← identifier::Math
   |-[3] ← .::.
   |-[4] ← identifier::sqrt
   |-[5] ← (::(
   |-[6] ← identifier::amount0
   |-[7] ← .::.
   |-[8] ← identifier::mul
   |-[9] ← (::(
   |-[10] ← identifier::amount1
   |-[11] ← )::)
   |-[12] ← )::)
   |-[13] ← .::.
   |-[14] ← identifier::sub
   |-[15] ← (::(
   |-[16] ← identifier::MINIMUM
[123] →            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens
[124] →         } else {
   |-[0] ← }::}
   |-[1] ← else::else
   |-[2] ← {::{
[125] →             liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);
   |-[0] ← identifier::liquidity
   |-[1] ← =::=
   |-[2] ← identifier::Math
   |-[3] ← .::.
   |-[4] ← identifier::min
   |-[5] ← (::(
   |-[6] ← identifier::amount0
   |-[7] ← .::.
   |-[8] ← identifier::mul
   |-[9] ← (::(
[126] →         }
   |-[0] ← }::}
[127] →         require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');
   |-[0] ← identifier::require
   |-[1] ← (::(
   |-[2] ← identifier::liquidity
   |-[3] ← >::>
   |-[4] ← uint::0
   |-[5] ← ,::,
[128] →         _mint(to, liquidity);
[130] →         _update(balance0, balance1, _reserve0, _reserve1);
[131] →         if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date
   |-[0] ← if::if
   |-[1] ← (::(
   |-[2] ← identifier::feeOn
   |-[3] ← )::)
   |-[4] ← identifier::kLast
   |-[5] ← =::=
   |-[6] ← uint::uint
   |-[7] ← (::(
   |-[8] ← identifier::reserve0
   |-[9] ← )::)
   |-[10] ← .::.
   |-[11] ← identifier::mul
   |-[12] ← (::(
   |-[13] ← identifier::reserve1
   |-[14] ← )::)
   |-[15] ← ;::;
   |-[16] ← comment:: reserve0 and reserve1 are up-to-date
[132] →         emit Mint(msg.sender, amount0, amount1);
   |-[0] ← emit::emit
   |-[1] ← identifier::Mint
   |-[2] ← (::(
   |-[3] ← identifier::msg
   |-[4] ← .::.
   |-[5] ← identifier::sender
   |-[6] ← ,::,
   |-[7] ← identifier::amount0
   |-[8] ← ,::,
   |-[9] ← identifier::amount1
   |-[10] ← )::)
   |-[11] ← ;::;
[133] →     }
   |-[0] ← }::}
[135] →     // this low-level function should be called from a contract which performs important safety checks
   |-[0] ← comment:: this low-level function should be called from a contract which performs important safety checks
[136] →     function burn(address to) external lock returns (uint amount0, uint amount1) {
   |-[0] ← function::function
   |-[1] ← identifier::burn
   |-[2] ← (::(
   |-[3] ← address::address
   |-[4] ← identifier::to
   |-[5] ← )::)
   |-[6] ← external::external
   |-[7] ← identifier::lock
   |-[8] ← returns::returns
   |-[9] ← (::(
   |-[10] ← uint::uint
   |-[11] ← identifier::amount0
   |-[12] ← ,::,
   |-[13] ← uint::uint
   |-[14] ← identifier::amount1
   |-[15] ← )::)
   |-[16] ← {::{
[137] →         (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
   |-[0] ← (::(
   |-[1] ← identifier::uint112
[138] →         address _token0 = token0;              
   |-[0] ← address::address
[139] →                   // gas savings
   |-[0] ← comment:: gas savings
[140] →         address _token1 = token1;                                // gas savings
   |-[0] ← address::address
[141] →         uint balance0 = IERC20(_token0).balanceOf(address(this));
   |-[0] ← uint::uint
   |-[1] ← identifier::balance0
   |-[2] ← =::=
   |-[3] ← identifier::IERC20
   |-[4] ← (::(
[142] →         uint balance1 = IERC20(_token1).balanceOf(address(this));
   |-[0] ← uint::uint
   |-[1] ← identifier::balance1
   |-[2] ← =::=
   |-[3] ← identifier::IERC20
   |-[4] ← (::(
[143] →         uint liquidity = balanceOf[address(this)];
   |-[0] ← uint::uint
   |-[1] ← identifier::liquidity
   |-[2] ← =::=
   |-[3] ← identifier::balanceOf
   |-[4] ← [::[
   |-[5] ← address::address
   |-[6] ← (::(
   |-[7] ← this::this
   |-[8] ← )::)
   |-[9] ← ]::]
   |-[10] ← ;::;
[145] →         bool feeOn = _mintFee(_reserve0, _reserve1);
   |-[0] ← bool::bool
   |-[1] ← identifier::feeOn
   |-[2] ← =::=
[146] →         uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee
   |-[0] ← uint::uint
[147] →         amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution
   |-[0] ← identifier::amount0
   |-[1] ← =::=
   |-[2] ← identifier::liquidity
   |-[3] ← .::.
   |-[4] ← identifier::mul
   |-[5] ← (::(
   |-[6] ← identifier::balance0
   |-[7] ← )::)
   |-[8] ← /::/
[148] →         amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution
   |-[0] ← identifier::amount1
   |-[1] ← =::=
   |-[2] ← identifier::liquidity
   |-[3] ← .::.
   |-[4] ← identifier::mul
   |-[5] ← (::(
   |-[6] ← identifier::balance1
   |-[7] ← )::)
   |-[8] ← /::/
[149] →         require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');
   |-[0] ← identifier::require
   |-[1] ← (::(
   |-[2] ← identifier::amount0
   |-[3] ← >::>
   |-[4] ← uint::0
   |-[5] ← &::&
   |-[6] ← &::&
   |-[7] ← identifier::amount1
   |-[8] ← >::>
   |-[9] ← uint::0
   |-[10] ← ,::,
[150] →         _burn(address(this), liquidity);
[151] →         _safeTransfer(_token0, to, amount0);
[152] →         _safeTransfer(_token1, to, amount1);
[153] →         balance0 = IERC20(_token0).balanceOf(address(this));
   |-[0] ← identifier::balance0
   |-[1] ← =::=
   |-[2] ← identifier::IERC20
   |-[3] ← (::(
[154] →         balance1 = IERC20(_token1).balanceOf(address(this));
   |-[0] ← identifier::balance1
   |-[1] ← =::=
   |-[2] ← identifier::IERC20
   |-[3] ← (::(
[156] →         _update(balance0, balance1, _reserve0, _reserve1);
[157] →         if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date
   |-[0] ← if::if
   |-[1] ← (::(
   |-[2] ← identifier::feeOn
   |-[3] ← )::)
   |-[4] ← identifier::kLast
   |-[5] ← =::=
   |-[6] ← uint::uint
   |-[7] ← (::(
   |-[8] ← identifier::reserve0
   |-[9] ← )::)
   |-[10] ← .::.
   |-[11] ← identifier::mul
   |-[12] ← (::(
   |-[13] ← identifier::reserve1
   |-[14] ← )::)
   |-[15] ← ;::;
   |-[16] ← comment:: reserve0 and reserve1 are up-to-date
[158] →         emit Burn(msg.sender, amount0, amount1, to);
   |-[0] ← emit::emit
   |-[1] ← identifier::Burn
   |-[2] ← (::(
   |-[3] ← identifier::msg
   |-[4] ← .::.
   |-[5] ← identifier::sender
   |-[6] ← ,::,
   |-[7] ← identifier::amount0
   |-[8] ← ,::,
   |-[9] ← identifier::amount1
   |-[10] ← ,::,
   |-[11] ← identifier::to
   |-[12] ← )::)
   |-[13] ← ;::;
[159] →     }
   |-[0] ← }::}
[161] →     // this low-level function should be called from a contract which performs important safety checks
   |-[0] ← comment:: this low-level function should be called from a contract which performs important safety checks
[162] →     function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {
   |-[0] ← function::function
   |-[1] ← identifier::swap
   |-[2] ← (::(
   |-[3] ← uint::uint
   |-[4] ← identifier::amount0Out
   |-[5] ← ,::,
   |-[6] ← uint::uint
   |-[7] ← identifier::amount1Out
   |-[8] ← ,::,
   |-[9] ← address::address
   |-[10] ← identifier::to
   |-[11] ← ,::,
   |-[12] ← bytes::bytes
   |-[13] ← identifier::calldata
   |-[14] ← identifier::data
   |-[15] ← )::)
   |-[16] ← external::external
   |-[17] ← identifier::lock
   |-[18] ← {::{
[163] →         require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');
   |-[0] ← identifier::require
   |-[1] ← (::(
   |-[2] ← identifier::amount0Out
   |-[3] ← >::>
   |-[4] ← uint::0
   |-[5] ← |::|
   |-[6] ← |::|
   |-[7] ← identifier::amount1Out
   |-[8] ← >::>
   |-[9] ← uint::0
   |-[10] ← ,::,
[164] →         (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
   |-[0] ← (::(
   |-[1] ← identifier::uint112
[165] →         require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');
   |-[0] ← identifier::require
   |-[1] ← (::(
   |-[2] ← identifier::amount0Out
   |-[3] ← <::<
[167] →         uint balance0;
   |-[0] ← uint::uint
   |-[1] ← identifier::balance0
   |-[2] ← ;::;
[168] →         uint balance1;
   |-[0] ← uint::uint
   |-[1] ← identifier::balance1
   |-[2] ← ;::;
[169] →         { // scope for _token{0,1}, avoids stack too deep errors
   |-[0] ← {::{
   |-[1] ← comment:: scope for _token{0,1}, avoids stack too deep errors
[170] →         address _token0 = token0;
   |-[0] ← address::address
[171] →         address _token1 = token1;
   |-[0] ← address::address
[172] →         require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');
   |-[0] ← identifier::require
   |-[1] ← (::(
   |-[2] ← identifier::to
   |-[3] ← !=::!=
[173] →         if (amount0Out > 0
   |-[0] ← if::if
   |-[1] ← (::(
   |-[2] ← identifier::amount0Out
   |-[3] ← >::>
   |-[4] ← uint::0
[174] → ) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens
   |-[0] ← )::)
   |-[1] ← )::)
[175] →         if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens
   |-[0] ← if::if
   |-[1] ← (::(
   |-[2] ← identifier::amount1Out
   |-[3] ← >::>
   |-[4] ← uint::0
   |-[5] ← )::)
[176] →         if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);
   |-[0] ← if::if
   |-[1] ← (::(
   |-[2] ← identifier::data
   |-[3] ← .::.
   |-[4] ← identifier::length
   |-[5] ← >::>
   |-[6] ← uint::0
   |-[7] ← )::)
   |-[8] ← identifier::IUniswapV2Callee
   |-[9] ← (::(
   |-[10] ← identifier::to
   |-[11] ← )::)
   |-[12] ← .::.
   |-[13] ← identifier::uniswapV2Call
   |-[14] ← (::(
   |-[15] ← identifier::msg
   |-[16] ← .::.
   |-[17] ← identifier::sender
   |-[18] ← ,::,
   |-[19] ← identifier::amount0Out
   |-[20] ← ,::,
   |-[21] ← identifier::amount1Out
   |-[22] ← ,::,
   |-[23] ← identifier::data
   |-[24] ← )::)
   |-[25] ← ;::;
[177] →         balance0 = IERC20(_token0).balanceOf(address(this));
   |-[0] ← identifier::balance0
   |-[1] ← =::=
   |-[2] ← identifier::IERC20
   |-[3] ← (::(
[178] →         balance1 = IERC20(_token1).balanceOf(address(this));
   |-[0] ← identifier::balance1
   |-[1] ← =::=
   |-[2] ← identifier::IERC20
   |-[3] ← (::(
[179] →         }
   |-[0] ← }::}
[180] →         uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;
   |-[0] ← uint::uint
   |-[1] ← identifier::amount0In
   |-[2] ← =::=
   |-[3] ← identifier::balance0
   |-[4] ← >::>
[181] →         uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;
   |-[0] ← uint::uint
   |-[1] ← identifier::amount1In
   |-[2] ← =::=
   |-[3] ← identifier::balance1
   |-[4] ← >::>
[182] →         require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');
   |-[0] ← identifier::require
   |-[1] ← (::(
   |-[2] ← identifier::amount0In
   |-[3] ← >::>
   |-[4] ← uint::0
   |-[5] ← |::|
   |-[6] ← |::|
   |-[7] ← identifier::amount1In
   |-[8] ← >::>
   |-[9] ← uint::0
   |-[10] ← ,::,
[183] →         { // scope for reserve{0,1}Adjusted, avoids stack too deep errors
   |-[0] ← {::{
   |-[1] ← comment:: scope for reserve{0,1}Adjusted, avoids stack too deep errors
[184] →         uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));
   |-[0] ← uint::uint
   |-[1] ← identifier::balance0Adjusted
   |-[2] ← =::=
   |-[3] ← identifier::balance0
   |-[4] ← .::.
   |-[5] ← identifier::mul
   |-[6] ← (::(
   |-[7] ← uint::1000
   |-[8] ← )::)
   |-[9] ← .::.
   |-[10] ← identifier::sub
   |-[11] ← (::(
   |-[12] ← identifier::amount0In
   |-[13] ← .::.
   |-[14] ← identifier::mul
   |-[15] ← (::(
   |-[16] ← uint::3
   |-[17] ← )::)
   |-[18] ← )::)
   |-[19] ← ;::;
[185] →         uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));
   |-[0] ← uint::uint
   |-[1] ← identifier::balance1Adjusted
   |-[2] ← =::=
   |-[3] ← identifier::balance1
   |-[4] ← .::.
   |-[5] ← identifier::mul
   |-[6] ← (::(
   |-[7] ← uint::1000
   |-[8] ← )::)
   |-[9] ← .::.
   |-[10] ← identifier::sub
   |-[11] ← (::(
   |-[12] ← identifier::amount1In
   |-[13] ← .::.
   |-[14] ← identifier::mul
   |-[15] ← (::(
   |-[16] ← uint::3
   |-[17] ← )::)
   |-[18] ← )::)
   |-[19] ← ;::;
[186] →         require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');
   |-[0] ← identifier::require
   |-[1] ← (::(
   |-[2] ← identifier::balance0Adjusted
   |-[3] ← .::.
   |-[4] ← identifier::mul
   |-[5] ← (::(
   |-[6] ← identifier::balance1Adjusted
   |-[7] ← )::)
   |-[8] ← >=::>=
   |-[9] ← uint::uint
   |-[10] ← (::(
[187] →         }
   |-[0] ← }::}
[189] →         _update(balance0, balance1, _reserve0, _reserve1);
[190] →         emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);
   |-[0] ← emit::emit
   |-[1] ← identifier::Swap
   |-[2] ← (::(
   |-[3] ← identifier::msg
   |-[4] ← .::.
   |-[5] ← identifier::sender
   |-[6] ← ,::,
   |-[7] ← identifier::amount0In
   |-[8] ← ,::,
   |-[9] ← identifier::amount1In
   |-[10] ← ,::,
   |-[11] ← identifier::amount0Out
   |-[12] ← ,::,
   |-[13] ← identifier::amount1Out
   |-[14] ← ,::,
   |-[15] ← identifier::to
   |-[16] ← )::)
   |-[17] ← ;::;
[191] →     }
   |-[0] ← }::}
[193] →     // force balances to match reserves
   |-[0] ← comment:: force balances to match reserves
[194] →     function skim(address to) external lock {
   |-[0] ← function::function
   |-[1] ← identifier::skim
   |-[2] ← (::(
   |-[3] ← address::address
   |-[4] ← identifier::to
   |-[5] ← )::)
   |-[6] ← external::external
   |-[7] ← identifier::lock
   |-[8] ← {::{
[195] →         address _token0 = token0; // gas savings
   |-[0] ← address::address
[196] →         address _token1 = token1; // gas savings
   |-[0] ← address::address
[197] →         _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));
[198] →         _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));
[199] →     }
   |-[0] ← }::}
[201] →     // force reserves to match balances
   |-[0] ← comment:: force reserves to match balances
[202] →     function sync() external lock {
   |-[0] ← function::function
   |-[1] ← identifier::sync
   |-[2] ← (::(
   |-[3] ← )::)
   |-[4] ← external::external
   |-[5] ← identifier::lock
   |-[6] ← {::{
[203] →         _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);
[204] →     }
   |-[0] ← }::}
[205] → }
   |-[0] ← }::}
   |-[1] ← }::}
